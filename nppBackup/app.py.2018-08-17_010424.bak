# ================
#     GUI class
# ================
# -----------------
# threading library
import threading
# ---------------------
# GUI-related libraries 
from  Tkinter import *
import Tkinter, Tkconstants, tkFileDialog
# -----------------
# better fonts
import ttk, tkFont
# -----------------------
# python image library
from PIL import Image, ImageTk, ImageDraw, ExifTags
# -----------------------
# basic pythong libraries
from math import *
import os, sys, time, unicodedata, operator
# -----------------------
# probably need numeric pythong
import numpy as np
# -----------------------
from image_bar import *

global video
video = 'C:\Program Files\ffmpeg\bin\ffmpeg.exe'
                
# ================
#     GUI class
# inherent from tk
# ================
# -----------------
class root_gui_class(Tk):
    def __init__(self, event_caller):
    
        ## ------------------------------------
        ##  start tkinter window and title
        time.sleep(1)
        Tk.__init__(self)
        self.event_caller = event_caller
        self.title("Controlled Lapse")
        self.minsize(300, 300)
        self.geometry("800x600")
        os.chdir(os.getcwd())
        self.width = 800
        self.height = 600
        self.files = []
        self.view_image = None
        self.videos = []
        ## ------------------------------------
        
        ## ------------------------------------
        ## Menu Bar
        self.files = []
        self.menu_bar = Menu(self)
        # -- File Menu
        self.file_menu = Menu(self.menu_bar, tearoff=0)
        self.file_menu.add_command(label="Open", command=lambda: self.load_directory())
        self.file_menu.add_command(label="Exit", command=self.quit)
        self.menu_bar.add_cascade(label="File", menu=self.file_menu)
        self.config(menu=self.menu_bar)
        ## ------------------------------------
        
        ## ------------------------------------
        ##  create paned window that should 
        ##      cover everything in view
        self.window = PanedWindow(self, orient=VERTICAL, sashwidth=5, bg="#888888", opaqueresize=FALSE)
        self.window.pack(fill=BOTH, expand=1)
        self.window.bind('<B1-Motion>', self.window_click)
        ## ------------------------------------
        
        ## ------------------------------------
        ##  add middle viewer
        self.main = Frame(self.window, bg='black')
        self.main.pack(fill=BOTH, expand=TRUE)
        self.window.add(self.main, stretch="always")
        self.viewer = Frame(self.main, bg='black')
        Canvas(self.viewer)
        self.viewer.grid(row=0, column=0, sticky=NSEW)
        self.viewer.columnconfigure(1, weight=1)
        self.clips = Frame(self.main, bg='grey', width=200)
        Canvas(self.clips)
        self.clips.grid(row=0, column=1, sticky=NSEW)
        ## ------------------------------------
        
        ## ------------------------------------
        ##  add timeline viewer
        self.timeline = Frame(self.window, bg='black')
        self.window.add(self.timeline, height=75, stretch="never")
        self.resize = ''
        ## self.bind('<Enter>', self.on_resize)
        ## ------------------------------------
        self.bind('<Configure>', self.schedule_resize)

    def load_directory(self):
        self.directory = tkFileDialog.askdirectory()
        os.chdir(self.directory)
        files = []
        for file in os.listdir(self.directory):
            if '.jpg' in file:
                try:
                    Image.open(file)
                    files.append(image_class(file))
                except:
                    print 'could not open', file
        files.sort(key=operator.attrgetter('id'))
        for i in range(0, len(self.files)):
            files[i].id = i
        self.files.append(files)
        self.image_bar = image_bar_class(self.files[-1], self.timeline, self)
        self.show_image(self.files[-1][len(self.files)/2])
        self.add_video(self.files[-1])
        self.main.update_idletasks()
        self.bind('<B1-Motion>', self.image_bar.click)
        self.bind_all('<MouseWheel>', self.image_bar.wheel)
        
##     def schedule_resize(self, event):
##         print self.width, self.height, event.width, event.height
##         if (self.height == event.height and self.width == event.width):
##             print event.width, event.height
##         else:
##             self.width = event.width
##             self.height = event.height
##             self.resize = True
    
    def show_image(self, image):
        for widget in self.viewer.winfo_children():
            widget.destroy()
        self.view_image = ImageTk.PhotoImage(Image.open(image.filename))
        Label(self.viewer, image=self.view_image,
                          borderwidth=0,
                          compound="center",
                          highlightthickness = 0,
                          padx=0,
                          pady=0).pack(fill=BOTH)
    
    def add_video(self, files):
        img = Image.open(files[len(files)/2].filename)
        self.videos.append(img.resize((img.resize(self.clips.winfo_width(), 
                                       img.height * img.width / self.clips.winfo_width()), 
                                       Image.ANTIALIAS)))
        Label(self.clips, image=self.videos[-1],
                          borderwidth=0,
                          compound="center",
                          highlightthickness = 0,
                          padx=0,
                          pady=0).pack(fill=X)
        
    def window_click(self, event):
        print 'event', event.x, event.y
        if event.widget is self.window:
            if self.resize == '':
                pass
            else:
                self.after_cancel(self.resize)
            self.resize = self.after(200, self.on_resize)
        self.update_idletasks()
            
    def schedule_resize(self, event):
        if event.widget is self:
            if self.resize == '':
                pass
            else:
                self.after_cancel(self.resize)
            self.resize = self.after(200, self.on_resize)
            
            
    def on_resize(self):
        if (self.resize != ''):
            for widget in self.timeline.winfo_children():
                widget.destroy()
            if (len(self.files) > 0):
                self.image_bar = image_bar_class(self.files[-1], self.timeline, self)
            self.resize = ''
## ====================================

# ==========================
# main initializing function
# ==========================
def main():

    # create event caller for threads
    event_caller = threading.Event()

    # initialize GUI
    root = root_gui_class(event_caller)
    root.load_directory()

    # start GUI mainloop
    root.mainloop()

# ================
# start everything
# ----------------
main()
# ----------------
# ================
